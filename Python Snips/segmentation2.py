seg_1 = [1.540697414,0.296379276,0.071758673,1.45359285,-0.263126078,-0.213169804,1.304564985,1.418801443,3.477886769,0.730908895,1.659204601,-0.291616662,2.116055837,0.852061899,-0.71575524,1.036508581,7.797944334,-0.326766324,-0.370087478,-0.140440512,-1.076602011,-0.881775126,0.561418189,1.276052189,1.068244992,0.111452994]
seg_2 = [1.176862472,1.103202936,1.428709773,1.358432725,-0.793169063,-1.237855582,1.256856313,1.811866126,3.455065493,1.481581818,0.794334311,0.074134726,2.034007451,0.500058139,-0.999870598,1.648273576,6.439082203,-0.019284431,-0.201413799,-0.340388688,-1.717151617,-1.080009506,1.569850322,1.566061647,0.82159652,0.323315606]
seg_3 = [1.976030258,-0.594025412,0.125547884,2.529841698,-0.43457369,-0.70893958,1.015850824,0.915575452,3.71462527,1.319915106,2.178190519,-1.108689056,1.65304689,-0.011417249,-1.289351822,1.980939436,9.160652169,-1.038351177,0.315233598,-0.864913645,-1.245571416,-0.07838147,1.314741812,0.79031769,1.147258527,0.435434203]
seg_4 = [1.777183569, 1.096342064,0.742535946,1.93147174,-0.258034578,-0.523330088,1.546285286,1.354277232,2.787402986,0.924193328,1.215266303,-1.219953994,1.443232755,2.009050517,-2.61489714,1.002607169,7.450758559,-0.539159281,0.16019817,0.400752057,-1.310909446,-0.367777326,0.905616378,1.685139853,1.117165453,0.444519097]
seg_5 = [1.351978386,0.04981275,-0.218293873,1.328499805,0.088680555,-0.284576167,1.112208627,1.44489711,3.897656247,1.540919428,1.266783579,-0.517623186,2.634407148,0.32927899,-1.420846466,0.367409044,8.940425289,-1.589410042,1.174105521,0.553494243,-0.92638756,-1.550856244,0.658280939,1.61540888,0.682217308,0.179262334]
seg_6 = [1.928838178,0.357934317,0.202785339,1.206112108,0.384312687,-0.739000593,1.885984982,1.529081106,3.556685012,1.130938392,1.413149538,-0.973613609,2.076354309,0.064627422,-0.893070668,1.731123716,8.032112151,-0.300228794,0.043643038,-0.257019001,-0.880941621,-1.178412437,0.423214775,1.109502253,0.501581102,0.997568367]

seg_1_std = [1.355109731, -0.03564821, 1.533357426, 0.71274481, 0.798057986, -0.97857228, 0.283896331, 2.591418017, 0.289072653, 1.454721285, -1.16457815, -2.488305907, -1.938036069, 0.822310892, -0.578581712, -1.050487884, 0.959904191, 2.227258639, 1.070959462, 0.758566531, 1.838314967]
seg_2_std = [0.972387718, -1.239930411, -1.071062271, 0.629457133, 2.016850609, 0.771598513, 0.452105659, 1.155513407, -0.733506274, 0.091833963, 0.378322963, -0.158019445, 1.811967471, 3.514796214, 0.09631426, 1.235002168, 2.089956167, 3.764767104, 3.176929601, 3.184481501, 3.593306421]
seg_3_std = [-0.410585132, -0.810895071, -0.212015726, -0.805130348, -0.493100531, -1.775335606, 0.173412574, 2.380247578, -0.313185032, 0.667547902, -1.994930124, -2.232745233, -0.701676628, 1.338402963, -1.087254008, -1.820639447, 1.879548349, 2.46376066, 2.097358178, 0.30993713, 1.897157132]
seg_4_std = [-2.751469677, -3.193449017, -1.973126221, -2.191278085, -1.305904629, -2.573482648, -1.776046541, 0.543864948, -1.045951612, -0.750575744, -2.232002511, -0.478580583, -1.766657066, 4.722483088, 0.025491634, -1.834825297, 1.64071929, 1.906886196, 0.725205476, 0.967582028, 0.952234264]
seg_5_std = [0.315265195, -0.816200611, 0.336866286, 0.472530844, -0.220107307, -1.631537129, 0.09715638, 2.295206253, 0.087565673, 0.839892167, -1.019224693, -2.797838007, -0.723397884, 1.656313142, -0.340281192, -1.366477225, 1.870971509, 2.033802671, 1.686365345, 0.042165734, 2.552121678]
seg_6_std = [-1.143578702, -1.83947913, -0.888923315, -0.1855816, -1.37413453, -2.117365493, -0.782153779, 1.786852561, -0.359304495, 0.387976806, -1.553752015, -1.913001423, -0.384459104, 2.366384465, -0.433030442, -0.609076855, 2.052447396, 3.193698033, 2.342288063, 0.311287701, 2.779347182]

seg_1_const = -68.43842421
seg_2_const = -64.79347534
seg_3_const = -78.1106885
seg_4_const = -68.78113523
seg_5_const = -73.15713028
seg_6_const = -75.97508778

#q_vals = [S5.r1.val+1,  S5.r2.val+1,  S5.r3.val+1,  S5.r4.val+1,  S5.r5.val+1,  S5.r6.val+1,  S5.r7.val+1,  S5.r8.val+1,  S5.r9.val+1,  S5.r10.val+1,  S5.r11.val+1,  S5.r12.val+1,  S6.r1.val+1,  S6.r2.val+1,  S6.r3.val+1,  S6.r4.val+1,  S6.r5.val+1,  S6.r6.val+1,  S6.r7.val+1,  S6.r8.val+1,  S6.r9.val+1,  S6.r10.val+1,  S6.r11.val+1,  S7.r1.val+1,  S7.r2.val+1,  S7.r3.val+1]

q_vals = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

# need the batt vals: 
q_vals_batt_1 = q_vals[0:12]
q_vals_batt_2 = q_vals[12:23]

def mean(data):
    #Return the sample arithmetic mean of data.
    n = len(data)
    if n < 1:
        raise ValueError('mean requires at least one data point')
    return sum(data)/float(len(data))

def sumOfSquareDev(data):
	#Return sum of square deviations of sequence data.
	c = mean(data)
	ss = sum((x-c)**2 for x in data)
	return ss

def stDev(data):
	#Calculates the population standard deviation.
	n = len(data)-1
	if n < 2:
	    raise ValueError('variance requires at least two data points')
	ss = sumOfSquareDev(data)
	pvar = ss/n 
	return pvar**0.5

def standardisedScores(data):
	n = len(data)
	x = mean(data)
	if stDev(data) > 0:
		y = stDev(data)
	else:
		y = 1
	stScore = [(data[i] - x)/y for i in range(len(data)-1)]
	return stScore

def concatArray(x, y):
	return x + y

# this is the last method:
def algRawCalc(seg, seg_std, vals, b_vals_1, b_vals_2, const):
	if sum(standardisedScores(b_vals_1)) == 0:
		return 0
	if sum(standardisedScores(b_vals_2)) == 0:
		return 0
	left_x = vals + standardisedScores(b_vals_1) + standardisedScores(b_vals_2)
	right_x = concatArray(seg, seg_std)
	return sum(i*j for i,j in zip(left_x, right_x)) + const

alg_raw_1 = [algRawCalc(seg_1, seg_1_std, q_vals, q_vals_batt_1, q_vals_batt_2, seg_1_const)]
alg_raw_2 = [algRawCalc(seg_2, seg_2_std, q_vals, q_vals_batt_1, q_vals_batt_2, seg_2_const)]
alg_raw_3 = [algRawCalc(seg_3, seg_3_std, q_vals, q_vals_batt_1, q_vals_batt_2, seg_3_const)]
alg_raw_4 = [algRawCalc(seg_4, seg_4_std, q_vals, q_vals_batt_1, q_vals_batt_2, seg_4_const)]
alg_raw_5 = [algRawCalc(seg_5, seg_5_std, q_vals, q_vals_batt_1, q_vals_batt_2, seg_5_const)]
alg_raw_6 = [algRawCalc(seg_6, seg_6_std, q_vals, q_vals_batt_1, q_vals_batt_2, seg_6_const)]

algRawArray = alg_raw_1 + alg_raw_2 + alg_raw_3 + alg_raw_4 + alg_raw_5 + alg_raw_6

print algRawArray
print (algRawArray.index(max(algRawArray)))



